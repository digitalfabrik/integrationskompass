version: 2.1

orbs:
  shellcheck: circleci/shellcheck@3.1.2

jobs:
  pip-install:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          key: pip-{{ checksum "pyproject.toml" }}-v1
      - run:
          name: Install pip dependencies
          command: |
            if [[ -d ".venv" ]]; then
              echo "Virtual environment restored from cache, skipping pip install"
            else
              python3 -m venv .venv
              source .venv/bin/activate
              pip install -e .[dev-pinned,pinned]
            fi
      - save_cache:
          key: pip-{{ checksum "pyproject.toml" }}-v1
          paths:
            - .venv
            - integreat_compass.egg-info
            - /home/circleci/.cache/pip
      - persist_to_workspace:
          root: .
          paths:
            - .venv
            - integreat_compass.egg-info
  npm-install:
    docker:
      - image: "cimg/node:lts"
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-{{ checksum "package-lock.json" }}-v1
      - run:
          name: Install npm dependencies
          command: |
            if [[ -d "node_modules" ]]; then
              echo "Node modules restored from cache, skipping npm install"
            else
              npm ci
            fi
      - save_cache:
          key: npm-{{ checksum "package-lock.json" }}-v1
          paths:
            - node_modules
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
  black:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Check black code style
          command: black --check .
  compile-translations:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install gettext
          command: sudo apt-get update && sudo apt-get install gettext
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Compile translation file
          command: |
            cd integreat_compass
            integreat-compass-cli compilemessages --settings=integreat_compass.core.circleci_settings
      - persist_to_workspace:
          root: .
          paths:
            - integreat_compass/locale/*/LC_MESSAGES/django.mo
  djlint:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Check formatting of Django templates
          command: djlint --check --lint integreat_compass
  eslint:
    docker:
      - image: "cimg/node:lts"
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Lint static CSS, JS & YAML files
          command: npx eslint . --no-error-on-unmatched-pattern
  isort:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Check isort code style
          command: isort --check .
  prettier:
    docker:
      - image: "cimg/node:lts"
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check formatting of CSS & JS files
          command: npx prettier --check .
  pylint:
    docker:
      - image: "cimg/python:3.9.16"
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run pylint
          command: ./tools/pylint.sh
  webpack:
    docker:
      - image: "cimg/node:lts"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Compile and bundle CSS and JS
          command: npm run prod
      - persist_to_workspace:
          root: .
          paths:
            - integreat_compass/static/dist
            - integreat_compass/webpack-stats.json
  setup-test-reporter:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install CodeClimate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Notify CodeClimate of a pending report
          command: ./cc-test-reporter before-build
      - persist_to_workspace:
          root: .
          paths:
            - cc-test-reporter
  test:
    docker:
      - image: cimg/python:3.9.16
      - image: cimg/postgres:14.1
        environment:
          POSTGRES_USER: integreat
          POSTGRES_DB: integreat-compass
          POSTGRES_PASSWORD: password
    resource_class: small
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Migrate database
          command: |
            cd integreat_compass
            integreat-compass-cli migrate --settings=integreat_compass.core.circleci_settings
      - run:
          name: Run tests
          command: pytest --circleci-parallelize --disable-warnings --cov=integreat_compass --cov-report xml --junitxml=test-results/junit.xml  --ds=integreat_compass.core.circleci_settings
      - run:
          name: Format test coverage
          command: ./cc-test-reporter format-coverage -t coverage.py -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - persist_to_workspace:
          root: .
          paths:
            - cc-test-reporter
            - coverage
  upload-test-coverage:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install CodeClimate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Sum coverage data and upload to CodeClimate
          command: |
            ./cc-test-reporter sum-coverage -o - coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -
  build-package:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Build integreat-compass package
          command: python3 -m build
      - persist_to_workspace:
          root: .
          paths:
            - dist
  bump-dev-version:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Bump version
          command: |
            # Install recent version of pip
            echo "Upgrade pip to make sure 'pip index' is available"
            pip install --upgrade pip
            # Check which versions of integreat-compass are available on the TestPyPI repository
            AVAILABLE_VERSIONS=$(pip index versions integreat-compass --pre -i https://test.pypi.org/simple/)
            echo "Current available versions on TestPyPI: ${AVAILABLE_VERSIONS}"
            CURRENT_ALPHA_VERSION=$(echo "${AVAILABLE_VERSIONS}" | head -n 1)
            echo "Most recent version on TestPyPI: ${CURRENT_ALPHA_VERSION}"
            CURRENT_ALPHA_VERSION=$(echo "${CURRENT_ALPHA_VERSION}" | sed "s/integreat-compass (\([^()]*\)a0)/\1-alpha/")
            echo "Version converted to alternative format: ${CURRENT_ALPHA_VERSION}"
            # Get current prod version
            CURRENT_VERSION=$(python -c "import integreat_compass; print(integreat_compass.__version__)")
            echo "Current production version: ${CURRENT_VERSION}"
            # Bump version to current alpha version if it is newer
            # Attention: exit(True) in Python means exit(1) which is False in Bash :)
            if python -c "from looseversion import LooseVersion; exit(LooseVersion('${CURRENT_VERSION}') > LooseVersion('${CURRENT_ALPHA_VERSION}'))"; then
              echo "Bump to the currently existing version"
              bumpver update -n --set-version="${CURRENT_ALPHA_VERSION}" --no-commit
            fi
            # Bump version to next alpha version
            echo "Bump to the next version"
            bumpver update -n -t alpha --no-commit
      - persist_to_workspace:
          root: .
          paths:
            - pyproject.toml
            - integreat_compass/__init__.py
  publish-package:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Publish integreat-compass package to (Test-)PyPI
          command: twine upload --non-interactive ./dist/integreat-compass-*.tar.gz
  check-translations:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install translation requirements
          command: sudo apt-get update && sudo apt-get install gettext pcregrep
      - run:
          name: Check translation file for missing or empty entries
          command: ./tools/check_translations.sh
  bump-version:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install requirements
          command: sudo apt-get update && sudo apt-get install pcregrep
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Request installation access token to authorize as Deliverino app
          command: echo "export DELIVERINO_ACCESS_TOKEN=$(./.circleci/scripts/get_access_token.py)" >> $BASH_ENV
      - run:
          name: Config git repository to commit & push as Deliverino app
          command: |
            git config user.name "deliverino[bot]"
            git config user.email "62934656+deliverino[bot]@users.noreply.github.com"
            git remote set-url origin "https://x-access-token:$DELIVERINO_ACCESS_TOKEN@github.com/digitalfabrik/integreat-compass.git"
      - run:
          name: Bump version
          command: bumpver update --tag=final
      - run:
          name: Get tag of newly created version
          command: |
            eval $(bumpver show --env -n)
            echo "export CURRENT_VERSION=$CURRENT_VERSION" >> $BASH_ENV
      - run:
          name: Tag and push commit
          command: |
            git tag --annotate "${CURRENT_VERSION}"
            git push origin --follow-tags "${CURRENT_VERSION}" HEAD
      - run:
          name: Merge version bump into develop
          command: git checkout develop && git merge main --commit --no-edit && git push
  create-release:
    docker:
      - image: cimg/python:3.9.16
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install requirements
          command: sudo apt-get update && sudo apt-get install pcregrep
      - run:
          name: Enable virtual environment
          command: echo "source .venv/bin/activate" >> $BASH_ENV
      - run:
          name: Request installation access token to authorize as Deliverino app
          command: echo "export DELIVERINO_ACCESS_TOKEN=$(./.circleci/scripts/get_access_token.py)" >> $BASH_ENV
      - run:
          name: Get previous version tag
          command: |
            PREV_TAG=$(git describe --abbrev=0 --tags "${CIRCLE_TAG}^") || PREV_TAG="3dc00abb0799ecd9d97480594b58330ec77cf43e"
            echo "export PREV_TAG=\"${PREV_TAG}\"" >> $BASH_ENV
      - run:
          name: Get contributors
          command: |
            CONTRIBUTORS=$(./.circleci/scripts/get_contributors.py "${DELIVERINO_ACCESS_TOKEN}" "${PREV_TAG}" "${CIRCLE_TAG}" -v)
            echo "export CONTRIBUTORS=\"${CONTRIBUTORS}\"" >> $BASH_ENV
      - run:
          name: Create release as Deliverino app
          command: ./.circleci/scripts/create_release.py "${DELIVERINO_ACCESS_TOKEN}" "${CIRCLE_TAG}" "${PREV_TAG}" "${CONTRIBUTORS}" ./dist/integreat-compass-*.tar.gz
  notify-mattermost:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install requirements
          command: sudo apt-get update && sudo apt-get install pcregrep
      - run:
          name: Notify mattermost about release
          command: |
            # Build notification message
            MM_MESSAGE="##### Integreat Compass version [${CIRCLE_TAG}](https://github.com/digitalfabrik/integreat-compass/releases/tag/${CIRCLE_TAG}) has been released successfully :tada:"
            # Send message to mattermost
            STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" -X POST -H 'Content-type: application/json' \
              --data \
              "{
                \"channel\": \"releases\",
                \"username\": \"circleci\",
                \"icon_emoji\": \":integreat-compass:\",
                \"text\": \"${MM_MESSAGE}\"
              }" "${MM_WEBHOOK}")
            if [ "$STATUS" -ne "200" ]; then
              echo "Notification not sent due to an error (HTTP status: ${STATUS})."
              exit 1
            fi
            echo "Notification sent!"

workflows:
  develop:
    jobs:
      - pip-install:
          filters:
            branches:
              ignore: main
      - npm-install:
          filters:
            branches:
              ignore: main
      - webpack:
          requires:
            - npm-install
      - compile-translations:
          requires:
            - pip-install
      - black:
          requires:
            - pip-install
      - djlint:
          requires:
            - pip-install
      - eslint:
          requires:
            - npm-install
      - isort:
          requires:
            - pip-install
      - prettier:
          requires:
            - npm-install
      - pylint:
          requires:
            - pip-install
      - shellcheck/check:
          dir: ./tools
          external_sources: true
          filters:
            branches:
              ignore: main
      - setup-test-reporter:
          context: codeclimate-compass
          filters:
            branches:
              ignore: main
      - test:
          requires:
            - pip-install
            - webpack
            - setup-test-reporter
      - upload-test-coverage:
          context: codeclimate-compass
          requires:
            - test
          filters:
            branches:
              only: /^(?!pull\/).*$/
      - bump-dev-version:
          filters:
            branches:
              only:
                - develop
                - /.*-publish-dev-package/
          requires:
            - pip-install
      - build-package:
          name: build-dev-package
          requires:
            - webpack
            - compile-translations
            - bump-dev-version
      - publish-package:
          name: publish-dev-package
          context: pypi-test
          filters:
            branches:
              only:
                - develop
                - /.*-publish-dev-package/
          requires:
            - build-dev-package

      - check-translations:
          requires:
            - pip-install
  main:
    jobs:
      - pip-install:
          name: pip-install-main
          filters:
            branches:
              only: main
      - bump-version:
          context: deliverino
          requires:
            - pip-install-main
  deploy:
    jobs:
      - pip-install:
          name: pip-install-deploy
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - npm-install:
          name: npm-install-deploy
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - webpack:
          name: webpack-deploy
          requires:
            - npm-install-deploy
          filters:
            tags:
              only: /.*/
      - compile-translations:
          name: compile-translations-deploy
          requires:
            - pip-install-deploy
          filters:
            tags:
              only: /.*/
      - build-package:
          requires:
            - webpack-deploy
            - compile-translations-deploy
          filters:
            tags:
              only: /.*/
      - publish-package:
          context: pypi
          requires:
            - build-package
          filters:
            tags:
              only: /.*/
      - create-release:
          context: deliverino
          requires:
            - publish-package
          filters:
            tags:
              only: /.*/
      - notify-mattermost:
          context: mattermost
          requires:
            - create-release
          filters:
            tags:
              only: /.*/
